=pod

=head1 NAME

CRYPTO_THREADID_current, CRYPTO_THREADID_cmp, CRYPTO_THREADID_cpy,
CRYPTO_THREADID_hash, CRYPTO_num_locks, CRYPTO_get_new_dynlockid,
CRYPTO_destroy_dynlockid, CRYPTO_lock, CRYPTO_set_locking_callback,
CRYPTO_set_dynlock_callbacks, CRYPTO_THREADID_set_callback,
CRYPTO_THREADID_get_callback - OpenSSL thread support

=head1 SYNOPSIS

 #include <openssl/crypto.h>

 /* Don't use this structure directly. */
 typedef struct crypto_threadid_st
         {
         void *ptr;
         unsigned long val;
         } CRYPTO_THREADID;
 /* Only use CRYPTO_THREADID_set_[numeric|pointer]() within callbacks */
 void CRYPTO_THREADID_set_numeric(CRYPTO_THREADID *id, unsigned long val);
 void CRYPTO_THREADID_set_pointer(CRYPTO_THREADID *id, void *ptr);

 void (*CRYPTO_THREADID_get_callback(void))(CRYPTO_THREADID *);
 void CRYPTO_THREADID_current(CRYPTO_THREADID *id);
 int CRYPTO_THREADID_cmp(const CRYPTO_THREADID *a,
                         const CRYPTO_THREADID *b);
 void CRYPTO_THREADID_cpy(CRYPTO_THREADID *dest,
                          const CRYPTO_THREADID *src);
 unsigned long CRYPTO_THREADID_hash(const CRYPTO_THREADID *id);

 /* Semi-deprecated */
 int CRYPTO_THREADID_set_callback(void (*threadid_func)(CRYPTO_THREADID *));

 int CRYPTO_num_locks(void);

 /* struct CRYPTO_dynlock_value needs to be defined by the user */
 struct CRYPTO_dynlock_value;

 void CRYPTO_set_dynlock_callbacks(struct CRYPTO_dynlock_value
 *(*dyn_create_function)(const char *file, int line), void
 (*dyn_lock_function)(int mode, struct CRYPTO_dynlock_value *l, const
 char *file, int line), void (*dyn_destroy_function)(struct
 CRYPTO_dynlock_value *l, const char *file, int line));

 /* Deprecated */
 void CRYPTO_set_dynlock_create_callback(struct CRYPTO_dynlock_value *
	(*dyn_create_function)(char *file, int line));
 void CRYPTO_set_dynlock_lock_callback(void (*dyn_lock_function)
	(int mode, struct CRYPTO_dynlock_value *l,
	const char *file, int line));
 void CRYPTO_set_dynlock_destroy_callback(void (*dyn_destroy_function)
	(struct CRYPTO_dynlock_value *l, const char *file, int line));

 int CRYPTO_get_new_dynlockid(void);

 void CRYPTO_destroy_dynlockid(int i);

 void CRYPTO_lock(int mode, int n, const char *file, int line);

 #define CRYPTO_w_lock(type)	\
	CRYPTO_lock(CRYPTO_LOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)
 #define CRYPTO_w_unlock(type)	\
	CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_WRITE,type,__FILE__,__LINE__)
 #define CRYPTO_r_lock(type)	\
	CRYPTO_lock(CRYPTO_LOCK|CRYPTO_READ,type,__FILE__,__LINE__)
 #define CRYPTO_r_unlock(type)	\
	CRYPTO_lock(CRYPTO_UNLOCK|CRYPTO_READ,type,__FILE__,__LINE__)
 #define CRYPTO_add(addr,amount,type)	\
	CRYPTO_add_lock(addr,amount,type,__FILE__,__LINE__)

=head1 DESCRIPTION

When built with native thread support OpenSSL is thread-safe.  Otherwise
the application must set functions (callbacks) to be used for
thread-related functionality.

When built with native thread support, the first time one of these
callbacks is needed then the default (native threads) implementation
will be set.  It is not possible to change any of these callbacks once
they are set.

If OpenSSL without native support is used in a multi-threaded manner
without setting these callbacks then the process will likely crash.  On
most systems it is possible to configure and build OpenSSL with native
thread support -- this is the recommended way to use OpenSSL in programs
and libraries that support multi-threaded operation.

It is possible to build and use OpenSSL with alternate threading
libraries, but this is dangerous if multiple libraries loaded in the
same process can end up using different threading implementations.

There are four thread-related operations for which callbacks
(application-provided implementations) may be set:

=over 4

=item *
Thread ID (as a numeric and/or pointer value types).  Use
CRYPTO_THREADID_set_callback() to provide an implementation of thread ID
getters.

The thread ID callback is needed to record the currently-executing
thread's identifier into B<id>. The implementation of this callback should not
fill in B<id> directly, but should use CRYPTO_THREADID_set_numeric() if thread
IDs are numeric, or CRYPTO_THREADID_set_pointer() if they are pointer-based.
If the application does not register such a callback using
CRYPTO_THREADID_set_callback(), then a default implementation is used - on
Windows and BeOS this uses the system's default thread identifying APIs, and on
all other platforms it uses the address of B<errno>. The latter is satisfactory
for thread-safety if and only if the platform has a thread-local error number
facility.

=item *
Acquire/release locks.  Use CRYPTO_set_locking_callback() to provide an
implementation of lock acquisition/release.

This callback must be able to handle up to CRYPTO_num_locks() locks.

Applications using CRYPTO_lock() should set mode to the union of
CRYPTO_LOCK (or UNLOCK) and CRYPTO_READ (or CRYPTO_WRITE) to lock
(unlock) for read (write).  Actual lock implementations may be exclusive
locks, or they may be reader/writer locks.  If the application does not
specify one of CRYPTO_READ or CRYPTO_WRITE then the implementation must
assume CRYPTO_WRITE.

=item *
Atomic integer addition (and subtraction).  Use
CRYPTO_set_add_lock_callback() to set an implementation of integer
atomic addition.

=item *
Dynamically allocated locks.  Use CRYPTO_set_dynlock_callbacks() to
provide an implementation of lock creation, acquisition/release, and
destruction.

=back

The B<file> and B<line> arguments to the callbacks are the file number
of the function setting the lock. They can be useful for debugging.

The following functions can be used to get or compare thread IDs:

=over 4

=item *
CRYPTO_THREADID_current() records the currently-executing thread ID into the
given B<id> object.

=item *
CRYPTO_THREADID_cmp() compares two thread IDs (returning zero for equality, ie.
the same semantics as memcmp()).

=item *
CRYPTO_THREADID_cpy() duplicates a thread ID value,

=item *
CRYPTO_THREADID_hash() returns a numeric value usable as a hash-table key. This
is usually the exact numeric or pointer-based thread ID used internally, however
this also handles the unusual case where pointers are larger than 'long'
variables and the platform's thread IDs are pointer-based - in this case, mixing
is done to attempt to produce a unique numeric value even though it is not as
wide as the platform's true thread IDs.

=back

Additionally, OpenSSL supports dynamic locks, and sometimes, some parts
of OpenSSL need it for better performance.  To enable this, the following
is required:

=over 4

=item *
Three additional callback function, dyn_create_function, dyn_lock_function
and dyn_destroy_function.

=item *
A structure defined with the data that each lock needs to handle.

=back

struct CRYPTO_dynlock_value has to be defined to contain whatever structure
is needed to handle locks.

dyn_create_function(const char *file, int line) is needed to create a
lock.  Multi-threaded applications might crash at random if it is not set.

dyn_lock_function(int mode, CRYPTO_dynlock *l, const char *file, int line)
is needed to perform locking off dynamic lock numbered n. Multi-threaded
applications might crash at random if it is not set.

dyn_destroy_function(CRYPTO_dynlock *l, const char *file, int line) is
needed to destroy the lock l. Multi-threaded applications might crash at
random if it is not set.

CRYPTO_get_new_dynlockid() is used to create locks.  It will call
dyn_create_function for the actual creation.

CRYPTO_destroy_dynlockid() is used to destroy locks.  It will call
dyn_destroy_function for the actual destruction.

CRYPTO_lock() is used to lock and unlock the locks.  mode is a bitfield
describing what should be done with the lock.  n is the number of the
lock as returned from CRYPTO_get_new_dynlockid().  mode can be combined
from the following values.  These values are pairwise exclusive, with
undefined behaviour if misused (for example, CRYPTO_READ and CRYPTO_WRITE
should not be used together):

	CRYPTO_LOCK	0x01
	CRYPTO_UNLOCK	0x02
	CRYPTO_READ	0x04
	CRYPTO_WRITE	0x08

=head1 RETURN VALUES

CRYPTO_num_locks() returns the required number of locks.

CRYPTO_get_new_dynlockid() returns the index to the newly created lock.

The other functions return no values.

=head1 NOTES

You can find out if OpenSSL was configured with thread support:

 #define OPENSSL_THREAD_DEFINES
 #include <openssl/opensslconf.h>
 #if defined(OPENSSL_THREADS)
   // thread support enabled
 #else
   // no thread support
 #endif

The following callback setter functions are deprecated as they are
fundamentally not thread-safe (if, for example, multiple libraries usign
OpenSSL libraries race to set them):

=over 4

=item *
CRYPTO_set_dynlock_create_callback

=item *
CRYPTO_set_dynlock_lock_callback

=item *
CRYPTO_set_dynlock_destroy_callback

=back

If you must set a non-native dynamic lock implementation, use
CRYPTO_set_dynlock_callbacks().

=head1 EXAMPLES

B<crypto/threads/mttest.c> shows examples of the callback functions on
Solaris, Irix and Win32.

=head1 HISTORY

Automatic native thread callback use was added in OpenSSL <TBD>.
CRYPTO_set_dynlock_callbacks() was added in OpenSSL <TBD>.

CRYPTO_set_locking_callback() is
available in all versions of SSLeay and OpenSSL.
CRYPTO_num_locks() was added in OpenSSL 0.9.4.
All functions dealing with dynamic locks were added in OpenSSL 0.9.5b-dev.
B<CRYPTO_THREADID> and associated functions were introduced in OpenSSL 1.0.0
to replace (actually, deprecate) the previous CRYPTO_set_id_callback(),
CRYPTO_get_id_callback(), and CRYPTO_thread_id() functions which assumed
thread IDs to always be represented by 'unsigned long'.

=head1 SEE ALSO

L<crypto(3)|crypto(3)>

=cut
